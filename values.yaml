global:
  convoy:
    # -- Docker image tags for all convoy components
    image: &image "getconvoy/convoy"
    # -- Docker image tags for all convoy components
    tag: &tag "v25.9.2"
    # -- Logger Level for all convoy components
    log_level: &logLevel "error"
    # -- Convoy Environment
    environment: &environment "oss"
    # -- JWT Secret key
    jwt_secret: &jwtSecret "convoy-secret"
    # -- JWT Refresh Secret key
    jwt_refresh_secret: &jwtRefreshSecret "convoy-refresh-secret"
    # -- If this secret parameter is not empty, JWT secret values will be ignored. The secrets should be in the 'jwt_secret' and 'jwt_refresh_secret' keys
    jwt_secret_name: ""
    # -- Tracing config for all convoy services
    tracer_enabled: &tracerEnabled false
    # -- Tracing provider type
    tracer_type: &tracerType "otel"
    # -- Open Telemetry auth header name
    otel_auth_header_name: &otelHeaderName ""
    # -- Open Telemetry auth header value
    otel_auth_header_value: &otelHeaderValue ""
    # -- Open Telemetry sample rate
    otel_sample_rate: &otelSampleRate 1
    # -- Open Telemetry collector url
    otel_collector_url: &otelCollectorUrl ""
    # -- Open Telemetry insecure skip verify
    otel_insecure_skip_verify: &otelInsecureSkipVerify true
    # -- Sentry DSN
    sentry_dsn: &sentryDsn ""
    # -- Retention policy duration
    retention_policy_duration: &retentionPolicyDuration 720h
    # -- Retention policy enabled
    retention_policy_enabled: &retentionPolicyEnabled false
    # -- Enable usage analytics
    enable_usage_analytics: &enabledUsageAnalytics true
    # -- API version
    api_version: &apiVersion "2024-01-01"
    # -- License Key
    license_key: &licenseKey ""
    # -- If this secret parameter is not empty, the inline license key value will be ignored.
    # The license key should be present in the 'license_key' key of the specified secret.
    license_key_secret_name: ""
    # -- Dispatcher CA Certificate configuration. If provided, it will use the content of the secret
    cacert_secret_name: ""
    # -- Dispatcher CA Certificate content. If provided, a secret will be created with this content
    cacert_content: ""
    # -- Enable Google OAuth SSO for user authentication
    google_oauth_enabled: &googleOAuthEnabled false
    # -- Google OAuth Client ID from Google Cloud Console
    google_oauth_client_id: &googleOAuthClientId ""
    # -- Google OAuth Redirect URL for callback handling
    google_oauth_redirect_url: &googleOAuthRedirectUrl ""
    # -- Enable Portal Realm authentication for enhanced security
    portal_realm_enabled: &portalRealmEnabled false
    # -- Sentry sample rate for error sampling (0.0 to 1.0)
    sentry_sample_rate: &sentrySampleRate 1.0
    # -- Database read replica DSN for improved performance
    read_replica_dsn: &readReplicaDsn ""

  externalDatabase:
    # -- Enable an external database; This will use postgresql chart, Change values if you use an external database
    enabled: true
    # -- Host for the external database
    host: "postgresql"
    # -- Password for the external database
    postgresPassword: &postgresPassword postgres
    # -- Database name for the external database
    database: &postgresDatabase convoy
    # -- Password for the external database, ignored in case of secret parameter with non-empty value
    password: &userPassword postgres
    # -- If this secret parameter is not empty, the password value will be ignored. The password in the secret should be in the 'password' key
    secret: ""
    # -- Username for the external database
    username: &username postgres
    # -- Query params for the external database
    options: "sslmode=disable&connect_timeout=30"
    # -- Port for the external database
    port: 5432
    # -- Read replicas configuration for the external database
    readReplicas: {}
#      - scheme: "postgres"
#        host: ""
#        username: ""
#        password: ""
#        database: "convoy"
#        port: 5432
#        options: "sslmode=disable&connect_timeout=30"

  nativeRedis:
    # -- Enable redis; This will use redis chart, Disable if you use an external redis
    enabled: &redisEnabled true
    # -- Host for the redis
    host: "redis-master"
    # -- password for the redis, ignored in case of secret parameter with non-empty value
    password: &redisPassword "convoy"
    # -- If this secret parameter is not empty, password value will be ignored. The password in the secret should be in the 'password' key
    secret: ""
    # -- Port for the redis
    port: 6379

  externalRedis:
    # -- Enable external redis, Enable this if you use an external redis and disable Native redis
    enabled: false
    # -- redis cluster addresses, if set the other values won't be used
    addresses: ""
    # -- Host for the external redis
    host: "redis-master"
    # -- Scheme for the external redis. This can be redis, rediss, redis-socket or redis-sentinel
    scheme: "redis"
    # -- username for the external redis.
    username: ""
    # -- password for the external redis, ignored in case of secret parameter with non-empty value
    password: "convoy"
    # -- If this secret parameter is not empty, password value will be ignored. The password in the secret should be in the 'password' key
    secret: ""
    # -- Database name for the external redis.
    database: "0"
    # -- Port for the external redis
    port: "6379"

# @ignored, used in case of external chart
postgresql:
  # -- Set to false if you don't want to create a postgres instance
  enabled: true
  fullnameOverride: "postgresql"
  image:
    registry: docker.io
    repository: bitnamilegacy/postgresql
    tag:  17.6.0-debian-12-r0
    pullPolicy: IfNotPresent 
  global:
    postgresql:
      auth:
        postgresPassword: *postgresPassword
        username: *username
        password: *userPassword
        database: *postgresDatabase

# @ignored, used in case of external chart
redis:
  # -- Set to false if you don't want to create a redis instance
  enabled: true
  image:
    registry: docker.io
    repository: bitnamilegacy/redis
    tag:  8.2.1-debian-12-r0
    pullPolicy: IfNotPresent
  architecture: standalone
  fullnameOverride: "redis"
  auth:
    enabled: *redisEnabled
    password: *redisPassword

agent:
  # -- Enable the agent component
  enabled: true
  image:
    # -- Repository to be used by the agent. The latest tag is used by default
    repository: *image
    # -- Pull policy for the agent image
    pullPolicy: IfNotPresent
    # @ignored
    tag: *tag

  env:
    environment: *environment
    proxy: ""
    sign_up_enabled: false
    log_level: *logLevel
    smtp:
      enabled: false
      from: ""
      # -- Ignored in case of secret parameter with non-empty value
      password: ""
      # -- If this secret parameter is not empty, password value will be ignored. The password in the secret should be in the 'password' key
      secret: ""
      port: 0
      provider: ""
      url: ""
      username: ""
      ssl: false
      reply_to: ""
    # @ignored
    tracer:
      type: *tracerType
      enabled: *tracerEnabled
      otel:
        otel_auth:
          header_name: *otelHeaderName
          header_value: *otelHeaderValue
        sample_rate: *otelSampleRate
        collector_url: *otelCollectorUrl
        insecure_skip_verify: *otelInsecureSkipVerify
      sentry:
        dsn: *sentryDsn
    pyroscope:
      enabled: false
      url: ""
      username: ""
      password: ""
      profile_id: ""
    enable_feature_flag: []
    retention_policy:
      policy: *retentionPolicyDuration
      enabled: *retentionPolicyEnabled
    analytics_enabled: *enabledUsageAnalytics
    storage:
      enabled: false
      type: ""
      on_prem:
        path: ""
      s3:
        bucket: ""
        accessKey: ""
        # -- Ignored in case of secret parameter with non-empty value
        secretKey: ""
        # -- If this secret parameter is not empty, secretKey value will be ignored. The password in the secret should be in the 'secretKey' key
        secret: ""
        region: ""
        session_token: ""
        endpoint: ""
    consumer_pool_size: 100
    enable_profiling: false
    metrics:
      enabled: false
      metrics_backend: prometheus
      prometheus_metrics:
        sample_time: 5
    instance_ingest_rate: 100
    worker_execution_mode: default
    max_retry_seconds: 7200
    license_key: *licenseKey
    dispatcher:
      insecure_skip_verify: false
      allow_list: ["0.0.0.0/0"]
      deny_list: ["127.0.0.1/8", "169.254.169.254/32"]
  app:
    replicaCount: 1
    resources: {}
    # limits:
    #   cpu: 1000m
    #   memory: 2000Mi
    # requests:
    #   cpu: 1000m
    #   memory: 1000Mi

  service:
    # -- Type of service for the agent
    type: ClusterIP
    # -- Port for the agent service
    port: 80

  autoscaling:
    # -- Enable autoscaling for the agent
    enabled: false
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  podDisruptionBudget:
    {}
    # -- Pod disruption budget
#    maxUnavailable: 1
#    minAvailable: 1

  securityContext: {}

server:
  # -- Enable the server component
  enabled: true
  image:
    # -- Repository to be used by the server. The latest tag is used by default
    repository: *image
    # -- Pull policy for the server image
    pullPolicy: IfNotPresent
    # @ignored
    tag: *tag

  env:
    environment: *environment
    log_level: *logLevel
    host: ""
    sign_up_enabled: false
    # -- Max response body when ingesting webhooks (might be renamed). Defaults to 50KB
    max_response_size: 50
    auth:
      jwt:
        enabled: true
        secret: *jwtSecret
        refresh_secret: *jwtRefreshSecret
      native:
        enabled: true
      file:
        basic: {}
        # -- If this secret parameter is not empty, basic auth inline value will be ignored. The basic auth config should be in the 'basic_auth_config' key
        secret: ""
    # @ignored
    tracer:
      type: *tracerType
      enabled: *tracerEnabled
      otel:
        otel_auth:
          header_name: *otelHeaderName
          header_value: *otelHeaderValue
        sample_rate: *otelSampleRate
        collector_url: *otelCollectorUrl
        insecure_skip_verify: *otelInsecureSkipVerify
      sentry:
        dsn: *sentryDsn
    pyroscope:
      enabled: false
      url: ""
      username: ""
      password: ""
      profile_id: ""
    enable_feature_flag: []
    retention_policy:
      policy: *retentionPolicyDuration
      enabled: *retentionPolicyEnabled
    analytics_enabled: *enabledUsageAnalytics
    storage:
      enabled: false
      type: ""
      on_prem:
        path: ""
      s3:
        bucket: ""
        accessKey: ""
        # -- Ignored in case of secret parameter with non-empty value
        secretKey: ""
        # -- If this secret parameter is not empty, secretKey value will be ignored. The password in the secret should be in the 'secretKey' key
        secret: ""
        prefix: ""
        region: ""
        session_token: ""
        endpoint: ""
    api_version: *apiVersion
    analytics:
      enabled: true
    enable_profiling: false
    metrics:
      enabled: false
      metrics_backend: prometheus
      prometheus_metrics:
        sample_time: 5
    instance_ingest_rate: 100
    max_retry_seconds: 7200
    license_key: *licenseKey
  app:
    replicaCount: 1
    resources: {}
    # limits:
    #   cpu: 1000m
    #   memory: 2000Mi
    # requests:
    #   cpu: 1000m
    #   memory: 1000Mi

  ingress:
    # -- Enable ingress for the server
    enabled: true
    annotations: {}
    ingressClassName: ""
    tls:
      - hosts:
          - test.com
        secretName: test-tls-secret
    hosts:
      - host: test.com
        http:
          paths:
            - path: /
              pathType: Prefix

  service:
    # -- Type of service for the server
    type: ClusterIP
    # -- Port for the server service
    port: 80

  autoscaling:
    # -- Enable autoscaling for the server
    enabled: false
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  podDisruptionBudget:
    {}
    # -- Pod disruption budget
#    maxUnavailable: 1
#    minAvailable: 1
  securityContext: {}
